{
	"openapi": "3.1.0",
	"info": {
		"title": "Philanthropy Data Commons API",
		"description": "An API for a common data platform to make the process of submitting data requests to funders less burdensome for changemakers seeking grants.",
		"version": "0.16.8",
		"license": {
			"name": "GNU Affero General Public License v3.0 only",
			"url": "https://spdx.org/licenses/AGPL-3.0-only.html"
		}
	},
	"components": {
		"responses": {
			"NotFound": {
				"description": "The specified resource was not found"
			}
		},
		"parameters": {
			"keycloakUserIdParam": {
				"$ref": "./components/parameters/keycloakUserIdParam.json"
			},
			"pageParam": {
				"$ref": "./components/parameters/pageParam.json"
			},
			"countParam": {
				"$ref": "./components/parameters/countParam.json"
			},
			"searchParam": {
				"$ref": "./components/parameters/searchParam.json"
			},
			"changemakerParam": {
				"$ref": "./components/parameters/changemakerParam.json"
			},
			"proposalParam": {
				"$ref": "./components/parameters/proposalParam.json"
			},
			"createdByParam": {
				"$ref": "./components/parameters/createdByParam.json"
			}
		},
		"securitySchemes": {
			"auth": {
				"type": "oauth2",
				"description": "The OAuth 2.0 (and OpenID Connect) Authorization Code flow.",
				"flows": {
					"authorizationCode": {
						"authorizationUrl": "{{AUTH_ISSUER}}/protocol/openid-connect/auth",
						"tokenUrl": "{{AUTH_ISSUER}}/protocol/openid-connect/token",
						"refreshUrl": "{{AUTH_ISSUER}}/protocol/openid-connect/token",
						"scopes": {
							"openid": "Use OpenID Connect (recommended).",
							"roles": "Read your roles (recommended).",
							"profile": "Read your profile (recommended)."
						}
					}
				}
			}
		},
		"schemas": {
			"BulkUploadTask": {
				"$ref": "./components/schemas/BulkUploadTask.json"
			},
			"BulkUploadTaskBundle": {
				"$ref": "./components/schemas/BulkUploadTaskBundle.json"
			},
			"keycloakOrganizationId": {
				"$ref": "./components/schemas/keycloakOrganizationId.json"
			},
			"BaseFieldsCopyTask": {
				"$ref": "./components/schemas/BaseFieldsCopyTask.json"
			},
			"BaseFieldsCopyTaskBundle": {
				"$ref": "./components/schemas/BaseFieldsCopyTaskBundle.json"
			},
			"DataProvider": {
				"$ref": "./components/schemas/DataProvider.json"
			},
			"Funder": {
				"$ref": "./components/schemas/Funder.json"
			},
			"ShallowChangemaker": {
				"$ref": "./components/schemas/ShallowChangemaker.json"
			},
			"Changemaker": {
				"$ref": "./components/schemas/Changemaker.json"
			},
			"PartialChangemaker": {
				"$ref": "./components/schemas/PartialChangemaker.json"
			},
			"ChangemakerProposal": {
				"$ref": "./components/schemas/ChangemakerProposal.json"
			},
			"PresignedPostRequest": {
				"$ref": "./components/schemas/PresignedPostRequest.json"
			},
			"PresignedPost": {
				"$ref": "./components/schemas/PresignedPost.json"
			},
			"Proposal": {
				"$ref": "./components/schemas/Proposal.json"
			},
			"ProposalVersion": {
				"$ref": "./components/schemas/ProposalVersion.json"
			},
			"ProposalFieldValue": {
				"$ref": "./components/schemas/ProposalFieldValue.json"
			},
			"ApplicationForm": {
				"$ref": "./components/schemas/ApplicationForm.json"
			},
			"ApplicationFormField": {
				"$ref": "./components/schemas/ApplicationFormField.json"
			},
			"shortCode": {
				"$ref": "./components/schemas/shortCode.json"
			},
			"BaseField": {
				"$ref": "./components/schemas/BaseField.json"
			},
			"BaseFieldLocalization": {
				"$ref": "./components/schemas/BaseFieldLocalization.json"
			},
			"BaseFieldLocalizationBundle": {
				"$ref": "./components/schemas/BaseFieldLocalizationBundle.json"
			},
			"PdcError": {
				"$ref": "./components/schemas/PdcError.json"
			},
			"Opportunity": {
				"$ref": "./components/schemas/Opportunity.json"
			},
			"OpportunityBundle": {
				"$ref": "./components/schemas/OpportunityBundle.json"
			},
			"PlatformProviderResponse": {
				"$ref": "./components/schemas/PlatformProviderResponse.json"
			},
			"Bundle": {
				"$ref": "./components/schemas/Bundle.json"
			},
			"ApplicationFormBundle": {
				"$ref": "./components/schemas/ApplicationFormBundle.json"
			},
			"DataProviderBundle": {
				"$ref": "./components/schemas/DataProviderBundle.json"
			},
			"FunderBundle": {
				"$ref": "./components/schemas/FunderBundle.json"
			},
			"ChangemakerBundle": {
				"$ref": "./components/schemas/ChangemakerBundle.json"
			},
			"ChangemakerProposalBundle": {
				"$ref": "./components/schemas/ChangemakerProposalBundle.json"
			},
			"ProposalBundle": {
				"$ref": "./components/schemas/ProposalBundle.json"
			},
			"SourceBundle": {
				"$ref": "./components/schemas/SourceBundle.json"
			},
			"Source": {
				"$ref": "./components/schemas/Source.json"
			},
			"Permission": {
				"$ref": "./components/schemas/Permission.json"
			},
			"User": {
				"$ref": "./components/schemas/User.json"
			},
			"UserBundle": {
				"$ref": "./components/schemas/UserBundle.json"
			},
			"UserChangemakerPermission": {
				"$ref": "./components/schemas/UserChangemakerPermission.json"
			},
			"UserFunderPermission": {
				"$ref": "./components/schemas/UserFunderPermission.json"
			},
			"UserDataProviderPermission": {
				"$ref": "./components/schemas/UserDataProviderPermission.json"
			},
			"UserGroupChangemakerPermission": {
				"$ref": "./components/schemas/UserGroupChangemakerPermission.json"
			},
			"UserGroupFunderPermission": {
				"$ref": "./components/schemas/UserGroupFunderPermission.json"
			},
			"UserGroupDataProviderPermission": {
				"$ref": "./components/schemas/UserGroupDataProviderPermission.json"
			}
		}
	},
	"paths": {
		"/applicationForms": {
			"get": {
				"operationId": "getApplicationForms",
				"summary": "Gets a list of application forms.",
				"tags": ["Application Forms"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"200": {
						"description": "All application forms currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationFormBundle"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"post": {
				"operationId": "addApplicationForm",
				"summary": "Adds a new application form.",
				"tags": ["Application Forms"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ApplicationForm"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new application form that was created, with populated fields",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationForm"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The application references entities that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/applicationForms/{applicationFormId}": {
			"get": {
				"operationId": "getApplicationFormById",
				"summary": "Gets a specific application form.",
				"tags": ["Application Forms"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "applicationFormId",
						"description": "The PDC-generated ID of an application form.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested application form.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationForm"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/tasks/bulkUploads": {
			"get": {
				"operationId": "getBulkUploadTasks",
				"summary": "Gets a list of bulk upload tasks.",
				"tags": ["Tasks"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/createdByParam" }
				],
				"responses": {
					"200": {
						"description": "Requested bulk uploads registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BulkUploadTaskBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"post": {
				"operationId": "addBulkUploadTask",
				"summary": "Registers a bulk upload task. This lets PDC ingest data previously uploaded via a POST to the /presignedPostRequests endpoint.",
				"tags": ["Tasks"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BulkUploadTask"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The bulk upload",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BulkUploadTask"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/tasks/baseFieldsCopy": {
			"get": {
				"operationId": "getBaseFieldsCopyTasks",
				"summary": "Gets a list of basefieldcopytasks.",
				"tags": ["Tasks"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/createdByParam" }
				],
				"responses": {
					"200": {
						"description": "Requested BaseFieldCopyTasks registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseFieldsCopyTaskBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addBaseFieldsCopyTask",
				"summary": "Creates a BaseFieldsCopyTask entity, which is then used to enqueue a basefield copying job to the job queue. This pulls basefields from a remote PDC instance and upserts them into the local database",
				"tags": ["Tasks"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BaseFieldsCopyTask"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The Sync BaseField",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseFieldsCopyTask"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/changemakerProposals": {
			"get": {
				"operationId": "getChangemakerProposals",
				"summary": "Gets a list of ChangemakerProposals.",
				"tags": ["Changemaker Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/changemakerParam" },
					{ "$ref": "#/components/parameters/proposalParam" }
				],
				"responses": {
					"200": {
						"description": "The requested ChangemakerProposals.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChangemakerProposalBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addChangemakerProposal",
				"summary": "Adds a new ChangemakerProposal associated with a specific changemaker.",
				"tags": ["Changemaker Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChangemakerProposal"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new ChangemakerProposal",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChangemakerProposal"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/changemakers": {
			"get": {
				"operationId": "getChangemakers",
				"summary": "Gets a list of changemakers.",
				"tags": ["Changemakers"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/proposalParam" }
				],
				"responses": {
					"200": {
						"description": "Changemakers currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChangemakerBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addChangemaker",
				"summary": "Adds a new changemaker.",
				"tags": ["Changemakers"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Changemaker"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new changemaker that was created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Changemaker"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/changemakers/{changemakerId}": {
			"get": {
				"operationId": "getChangemakerById",
				"summary": "Gets a specific changemaker.",
				"tags": ["Changemakers"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "changemakerId",
						"description": "The PDC-generated ID of a changemaker.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested changemaker.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Changemaker"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "updateChangemakerById",
				"summary": "Updates one or more fields of a specific changemaker.",
				"tags": ["Changemakers"],
				"security": [
					{
						"auth": ["realm_access:roles:administrator"]
					}
				],
				"parameters": [
					{
						"name": "changemakerId",
						"description": "The PDC-generated ID of a changemaker.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PartialChangemaker"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The updated changemaker.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Changemaker"
								}
							}
						}
					},
					"400": {
						"description": "At least one valid field was not provided or invalid fields were provided.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"404": {
						"description": "The given changemaker ID was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/changemakers/{changemakerId}/fiscalSponsors/{fiscalSponsorChangemakerId}": {
			"parameters": [
				{
					"name": "changemakerId",
					"description": "The PDC-generated ID of a changemaker (fiscal sponsee).",
					"in": "path",
					"required": true,
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "fiscalSponsorChangemakerId",
					"description": "The PDC-generated ID of a changemaker (fiscal sponsor).",
					"in": "path",
					"required": true,
					"schema": {
						"type": "integer"
					}
				}
			],
			"put": {
				"operationId": "putFiscalSponsorshipByChangemakerIds",
				"summary": "Adds a fiscal sponsorship between the given changemakers.",
				"tags": ["Changemakers"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"200": {
						"description": "The internal representation of the successfully created or updated fiscal sponsorship relation.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"fiscalSponseeChangemakerId": {
											"type": "integer",
											"example": "43"
										},
										"fiscalSponsorChangemakerId": {
											"type": "integer",
											"example": "42"
										},
										"createdAt": {
											"type": "string",
											"format": "date-time",
											"readOnly": true
										},
										"createdBy": {
											"description": "The keycloak user id of the PDC user that added this fiscal sponsorship record.",
											"type": "string",
											"format": "uuid",
											"readOnly": true
										},
										"notAfter": {
											"description": "For internal use. This always be null in a response from this endpoint.",
											"type": ["string", "null"],
											"format": "date-time",
											"readOnly": true,
											"example": null
										}
									},
									"required": [
										"fiscalSponseeChangemakerId",
										"fiscalSponsorChangemakerId",
										"createdAt",
										"createdBy",
										"notAfter"
									]
								}
							}
						}
					},
					"400": {
						"description": "The same ID was passed for sponsor and sponsee or the IDs were out of range.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The call passed one or more changemakerIds that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteFiscalSponsorshipByChangemakerIds",
				"summary": "Deletes a fiscal sponsorship between the given changemakers. This does not remove either changemaker.",
				"tags": ["Changemakers"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion of the fiscal sponsorship."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/presignedPostRequests": {
			"post": {
				"operationId": "addPresignedPostRequest",
				"summary": "Requests a presigned post URL.",
				"tags": ["Presigned Posts"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PresignedPostRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The presigned post request. Use the contents of this JSON to POST form data to S3. After posting data to S3, use the /bulkUploadTasks endpoint to let PDC ingest the data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PresignedPostRequest"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/proposals": {
			"get": {
				"operationId": "getProposals",
				"summary": "Gets a list of proposals.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/searchParam" },
					{ "$ref": "#/components/parameters/changemakerParam" },
					{ "$ref": "#/components/parameters/createdByParam" }
				],
				"responses": {
					"200": {
						"description": "A set of proposals currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProposalBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addProposal",
				"summary": "Adds a new proposal.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Proposal"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new proposal that was created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Proposal"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The proposal references entities that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/proposals/{proposalId}": {
			"get": {
				"operationId": "getProposalById",
				"summary": "Gets a specific proposal.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "proposalId",
						"description": "The PDC-generated ID of a proposal.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The proposal.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Proposal"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/proposalVersions": {
			"post": {
				"operationId": "addProposalVersion",
				"summary": "Adds a new proposal version.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProposalVersion"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new proposal version that was created, with populated field values",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProposalVersion"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The proposal version references entities that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/proposalVersions/{proposalVersionId}": {
			"get": {
				"operationId": "getProposalVersionById",
				"summary": "Gets a specific proposal version.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "proposalVersionId",
						"description": "The PDC-generated ID of a proposal version.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested proposalVersion.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProposalVersion"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/baseFields": {
			"get": {
				"operationId": "getBaseFields",
				"summary": "Gets a list of base fields.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"200": {
						"description": "All base fields currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/BaseField"
									}
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"post": {
				"operationId": "addBaseField",
				"summary": "Adds a new base field.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BaseField"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new base field that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseField"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/baseFields/{baseFieldId}": {
			"put": {
				"operationId": "updateBaseFieldById",
				"summary": "Updates a base field.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "baseFieldId",
						"description": "The PDC-generated ID of a base field.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BaseField"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The updated base field.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseField"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"404": {
						"description": "The base field could not be found."
					}
				}
			}
		},
		"/dataProviders": {
			"get": {
				"operationId": "getDataProviders",
				"summary": "Gets a list of data providers.",
				"tags": ["Data Providers"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" }
				],
				"responses": {
					"200": {
						"description": "A list of data providers.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProviderBundle"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/dataProviders/{dataProviderShortCode}": {
			"get": {
				"operationId": "getDataProviderByShortCode",
				"summary": "Gets a specific data provider.",
				"tags": ["Data Providers"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "dataProviderShortCode",
						"description": "The short code of a data provider.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The data provider.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProvider"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"put": {
				"operationId": "createOrUpdateDataProvider",
				"summary": "Creates or updates a new data provider.",
				"tags": ["Data Providers"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "dataProviderShortCode",
						"description": "The short code of a data provider.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProvider"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new data provider that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProvider"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/funders": {
			"get": {
				"operationId": "getFunders",
				"summary": "Gets a list of funders.",
				"tags": ["Funders"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" }
				],
				"responses": {
					"200": {
						"description": "A list of funders.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FunderBundle"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/funders/{funderShortCode}": {
			"get": {
				"operationId": "getFunderById",
				"summary": "Gets a specific funder.",
				"tags": ["Funders"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "funderShortCode",
						"description": "The short code of a funder.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The funder.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Funder"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"put": {
				"operationId": "createOrUpdateFunder",
				"summary": "Creates or updates a new funder.",
				"tags": ["Funders"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "funderShortCode",
						"description": "The short code of a funder.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Funder"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new funder that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Funder"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/baseFields/{baseFieldId}/localizations": {
			"get": {
				"operationId": "getBaseFieldLocalizationsByBaseFieldId",
				"summary": "Gets a list of base fields localizations for a given basefield.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "baseFieldId",
						"description": "The PDC-generated ID of a base field.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "All base field localizations for a given base field in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseFieldLocalizationBundle"
								}
							}
						}
					},
					"404": {
						"description": "The base field could not be found."
					}
				}
			}
		},
		"/baseFields/{baseFieldId}/localizations/{language}": {
			"put": {
				"operationId": "upsertBaseFieldLocalization",
				"summary": "Creates or updates a base field localization.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "baseFieldId",
						"description": "The PDC-generated ID of a base field.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "language",
						"description": "The valid IETF language tag for a base field localization",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BaseFieldLocalization"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new base field localization that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseFieldLocalization"
								}
							}
						}
					},
					"400": {
						"description": "Required fields were not provided or were incorrectly formatted.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"404": {
						"description": "The base field could not be found."
					}
				}
			}
		},
		"/opportunities": {
			"get": {
				"operationId": "getOpportunities",
				"summary": "Gets a list of opportunities.",
				"tags": ["Opportunities"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" }
				],
				"responses": {
					"200": {
						"description": "A list of known funding opportunities.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpportunityBundle"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"post": {
				"operationId": "addOpportunity",
				"summary": "Adds a new opportunity.",
				"tags": ["Opportunities"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Opportunity"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new opportunity that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Opportunity"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/opportunities/{opportunityId}": {
			"get": {
				"operationId": "getOpportunityById",
				"summary": "Gets a specific opportunity.",
				"tags": ["Opportunities"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "opportunityId",
						"description": "The PDC-generated ID of an opportunity, RFC, potential award or grant, etc.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The funding opportunity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Opportunity"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/platformProviderResponses": {
			"get": {
				"operationId": "getPlatformProviderResponses",
				"summary": "Gets a list of platform provider responses.",
				"tags": ["Internal Use Only"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "externalId",
						"description": "The external ID that has been associated with the response.  This ID is arbitrarily formatted, and cannot be predicted without knowledge of specific PDC data.",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "A list of cached platform provider responses.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/PlatformProviderResponse"
									}
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"post": {
				"operationId": "addPlatformProviderResponse",
				"summary": "Adds a new platform provider response.",
				"tags": ["Internal Use Only"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PlatformProviderResponse"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new platform provider response that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformProviderResponse"
								}
							}
						}
					},
					"400": {
						"description": "Required fields were not provided or were incorrectly formatted.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/sources": {
			"get": {
				"operationId": "getSources",
				"summary": "Gets a list of sources.",
				"tags": ["Sources"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"200": {
						"description": "All sources currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SourceBundle"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"post": {
				"operationId": "addSource",
				"summary": "Adds a new source.",
				"tags": ["Sources"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Source"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new source that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Source"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/sources/{sourceId}": {
			"get": {
				"operationId": "getSourceById",
				"summary": "Gets a specific source.",
				"tags": ["Sources"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "sourceId",
						"description": "The PDC-generated ID of a source.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The source.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Source"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteSourceById",
				"summary": "Deletes a specific source.",
				"tags": ["Sources"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "sourceId",
						"description": "The PDC-generated ID of a source to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The deleted source.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Source"
								}
							}
						}
					},
					"422": {
						"description": "The referenced entity does not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/users": {
			"get": {
				"operationId": "getUsers",
				"summary": "Gets a list of users.",
				"tags": ["Users"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/keycloakUserIdParam" }
				],
				"responses": {
					"200": {
						"description": "A list of users.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserBundle"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/users/{userKeycloakUserId}/changemakers/{changemakerId}/permissions/{permission}": {
			"put": {
				"operationId": "createOrUpdateUserChangemakerPermission",
				"summary": "Creates or updates a user-changemaker permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "userKeycloakUserId",
						"description": "The keycloak user id of a user.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "changemakerId",
						"description": "The id of a changemaker.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be granted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"201": {
						"description": "The resulting permission.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserChangemakerPermission"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteUserChangemakerPermission",
				"summary": "Deletes a user-changemaker permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "userKeycloakUserId",
						"description": "The keycloak user id of a user.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "changemakerId",
						"description": "The id of a changemaker.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/users/{userKeycloakUserId}/funders/{funderShortCode}/permissions/{permission}": {
			"put": {
				"operationId": "createOrUpdateUserFunderPermission",
				"summary": "Creates or updates a user funder permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "userKeycloakUserId",
						"description": "The keycloak user id of a user.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "funderShortCode",
						"description": "The shortCode of a funder.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be granted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"201": {
						"description": "The resulting permission.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserFunderPermission"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteUserFunderPermission",
				"summary": "Deletes a user-funder permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "userKeycloakUserId",
						"description": "The keycloak user id of a user.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "funderShortCode",
						"description": "The shortCode of a funder.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/users/{userKeycloakUserId}/dataProviders/{dataProviderShortCode}/permissions/{permission}": {
			"put": {
				"operationId": "createOrUpdateUserDataProviderPermission",
				"summary": "Creates or updates a user data provider permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "userKeycloakUserId",
						"description": "The keycloak user id of a user to whom to grant permission.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "dataProviderShortCode",
						"description": "The shortCode of a data provider on whose data to grant permission.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be granted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"201": {
						"description": "The resulting permission.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDataProviderPermission"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteUserDataProviderPermission",
				"summary": "Deletes a user-data-provider permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "userKeycloakUserId",
						"description": "The keycloak user id of a user.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "dataProviderShortCode",
						"description": "The shortCode of a data provider.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/userGroups/{keycloakOrganizationId}/changemakers/{changemakerId}/permissions/{permission}": {
			"put": {
				"operationId": "createOrUpdateUserGroupChangemakerPermission",
				"summary": "Creates or updates a userGroup-changemaker permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "keycloakOrganizationId",
						"description": "The keycloak organization id of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "changemakerId",
						"description": "The id of a changemaker.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be granted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"201": {
						"description": "The resulting permission.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserGroupChangemakerPermission"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteUserGroupChangemakerPermission",
				"summary": "Deletes a userGroup-changemaker permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "keycloakOrganizationId",
						"description": "The keycloak organization id of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "changemakerId",
						"description": "The id of a changemaker.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/userGroups/{keycloakOrganizationId}/funders/{funderShortCode}/permissions/{permission}": {
			"put": {
				"operationId": "createOrUpdateUserGroupFunderPermission",
				"summary": "Creates or updates a userGroup funder permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "keycloakOrganizationId",
						"description": "The keycloak organization id of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "funderShortCode",
						"description": "The shortCode of a funder.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be granted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"201": {
						"description": "The resulting permission.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserGroupFunderPermission"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteUserGroupFunderPermission",
				"summary": "Deletes a userGroup-funder permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "keycloakOrganizationId",
						"description": "The keycloak organization id of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "funderShortCode",
						"description": "The shortCode of a funder.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		},
		"/userGroups/{keycloakOrganizationId}/dataProviders/{dataProviderShortCode}/permissions/{permission}": {
			"put": {
				"operationId": "createOrUpdateUserGroupDataProviderPermission",
				"summary": "Creates or updates a userGroup data provider permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "keycloakOrganizationId",
						"description": "The keycloak organization id of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "dataProviderShortCode",
						"description": "The shortCode of a data provider.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be granted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"201": {
						"description": "The resulting permission.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserGroupDataProviderPermission"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			},
			"delete": {
				"operationId": "deleteUserGroupDataProviderPermission",
				"summary": "Deletes a userGroup-data-provider permission.",
				"tags": ["Permissions"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "keycloakOrganizationId",
						"description": "The keycloak organization id of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "dataProviderShortCode",
						"description": "The shortCode of a data provider on whose data to grant permission.",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/shortCode"
						}
					},
					{
						"name": "permission",
						"description": "The permission to be deleted.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["manage", "edit", "view"]
						}
					}
				],
				"responses": {
					"204": {
						"description": "Confirmation of successful deletion."
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					}
				}
			}
		}
	}
}
